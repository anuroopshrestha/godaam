extends ../layout

block styles
  link(rel="stylesheet", href="/dist/css/pickr.min.css")

block content
  .page-title
    #{title}
  form.columned(action="/store/:id" method="POST")
    .card-row.grid-half-half
      .card
        .card-title Store Information
        .control-row
          label(for="name") Name
          input#name(type="text" name="name" required value=store.name)
        .control-row
          label(for="registration") Registration Number
          input#registrationCode(type="text" name="registration[code]" value=store.registration && store.registration.code)
        .control-row
          label(for="registrationDate") Registration Date
          input#registrationDate(type="text" name="registration[date]" value=store.registration && store.registration.date)
        .control-row
          label(for="admin") Admin
          select#admin(name="users" required)
            option(value="0") -- Select a User
              each appuser in users
                option(value=appuser._id) #{appuser.name}
      .card
        .card-title Location
        .control-row
          label(for="address") Address
          input#address(type="text" name="location[address]" autocomplete="off" required value=store.location.address)
        .control-row
          label(for="lng") Longitude
          input#lng(type="text" name="location[coordinates][0]" required value=store.location.coordinates[0])
        .control-row
          label(for="lat") Lattitude
          input#lat(type="text" name="location[coordinates][1]" required value=store.location.coordinates[1])
        #map-wrap
          #map
        br
        button.btn.btn-primary Submit
  .card-row.grid-half-half
    .card
        .card-title Brands
        table.lined 
          tr
            th S.No
            th Name
            th
          each brand, i in store.brands
            tr
              td #{i+1} 
              td #{brand.name}
              td 
                span.edit-cell
                  ul.list-inline
                    li
                      a.openModal(href=`#` title="Edit" data-url=`/store/updatebrand/${store._id}/${brand._id}`)
                        span.ti-pencil
                    li
                      a(href=`/store/deletebrand/${store._id}/${brand._id}` title="Delete")
                        span.ti-trash
        br
        .card-title Add Brand
        form.columned(action=`/store/${store._id}/addbrand` method="POST")
          .control-row
            div
              label Name
            input(type="text" name="name")
          button.btn.btn-primary Add Brand
    .card
      .card-title Categories
      table.lined
        tr
          th S. No.
          th
          th Name
          th
          th Parent
        each category, i in store.categories
          tr
            td #{i+1}
            td
              .category-identifier(style=`background: ${category.identifier.color || '#fff'}`)
                if category.identifier.image
                  img(src=`/uploads/${store.slug}/${category.identifier.image}`, alt=store.slug)
            td #{category.name}
            td
              span.edit-cell
                ul.list-inline
                  li
                    a.openModal(href="#" title="Edit" data-url=`/store/updatecat/${store._id}/${category._id}`)
                      span.ti-pencil
                  li
                    a(href=`/store/deletecat/${store._id}/${category._id}` title="Delete")
                      span.ti-trash
            td #{category.parent}
      br
      .card-title Add Category
      form.columned(action=`/store/${store._id}/addcat` method="POST")
        .control-row
          div
            label(for="name") Name
          input#name(type="text" name="name" required)
        .control-row
          div
            label(for="parent") Parent
            p.small Leave unselected if main category
          select#parent
            option(value="0") --
            each category in store.categories
              option(value=category._id) #{category.name}
        .control-row
          label(for="image") Image
          input#image(type="file" name="identifier[image]")
        .control-row
          label(for="color") Color
          .color-picker
        input#color(type="hidden" name="identifier[color]" value="#2C3A47")
        button.btn.btn-primary Add 
  .card-row.grid-half-half
    .card
      .card-title Warehouses
      table.lined
        tr
          th S. No.
          th Name
          th Address
        each warehouse, i in store.warehouses
          tr
            th #{i+1}
            th #{warehouse.name}
            th #{warehouse.location.address}
      br
      .card-title Add Warehouse
      form.columned(action=`/store/${store._id}/addware` method="POST")
        .control-row
          label(for="name") Name
          input(type="text" name="name")
        .control-row
          label(for="address") Address
          input(type="text" name="location[address]")
        .control-row
          label(for="lng") Longitude
          input#lng(type="text" name="location[coordinates][0]")
        .control-row
          label(for="lat") Lattitude
          input#lat(type="text" name="location[coordinates][1]")
        button.btn.btn-primary Add
  script.
    function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: #{store.location.coordinates[1]}, lng: #{store.location.coordinates[0]}},
        zoom: 13
      });
      var input = document.getElementById('address');
      var latInput = document.getElementById('lat');
      var lngInput = document.getElementById('lng');

      var autocomplete = new google.maps.places.Autocomplete(input);

      // Bind the map's bounds (viewport) property to the autocomplete object,
      // so that the autocomplete requests use the current map bounds for the
      // bounds option in the request.
      autocomplete.bindTo('bounds', map);

      // Set the data fields to return when the user selects a place.
      autocomplete.setFields(
          ['address_components', 'geometry', 'icon', 'name']);

      var infowindow = new google.maps.InfoWindow();
      var infowindowContent = document.getElementById('infowindow-content');
      infowindow.setContent(infowindowContent);
      var marker = new google.maps.Marker({
        map: map,
        anchorPoint: new google.maps.Point(0, -29)
      });

      autocomplete.addListener('place_changed', function() {
        infowindow.close();
        marker.setVisible(false);
        var place = autocomplete.getPlace();
        if (!place.geometry) {
          // User entered the name of a Place that was not suggested and
          // pressed the Enter key, or the Place Details request failed.
          window.alert("No details available for input: '" + place.name + "'");
          return;
        }

        latInput.value = place.geometry.location.lat();
        lngInput.value = place.geometry.location.lng();

        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(17);  // Why 17? Because it looks good.
        }
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        var address = '';
        if (place.address_components) {
          address = [
            (place.address_components[0] && place.address_components[0].short_name || ''),
            (place.address_components[1] && place.address_components[1].short_name || ''),
            (place.address_components[2] && place.address_components[2].short_name || '')
          ].join(' ');
        }
      });
    }

    var colorInput = document.getElementById('color');
    var pickr = Pickr.create({
      el: '.color-picker',
      default: '#2C3A47',

      components: {
        // Main components
        preview: true,
        hue: true,
        defaultRepresentation: 'HEX',

        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          input: true,
          save: true
        }
      },
      // User has clicked the save button
      onSave(hsva, instance) {
        var colorString = '#' + hsva.toHEX().join('');
        colorInput.value = colorString;
      }
    });
      
block headerScripts
  script(src="https://cdn.jsdelivr.net/npm/pickr-widget/dist/pickr.min.js")

block scripts
  script(src=`https://maps.googleapis.com/maps/api/js?key=${process.env.MAP_KEY}&libraries=places&callback=initMap` async defer)